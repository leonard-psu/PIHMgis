#include "MyThread.h"
#include <QDebug>
#include <QMutex>
#include "globals.h"
#include <fstream>
#include <string>
#include<iostream>
#include <QDateTime>

//https://www.bogotobogo.com/Qt/Qt5_QThreads_GuiThread.php
#include "6PIHMSimulation/PIHMSrc/PIHM_v2.2/pihm.h"


Q_DECLARE_METATYPE(std::string)


MyThread::MyThread(QObject *parent, bool b) :
    QThread(parent), Stop(b)
{
}

// run() will be called when a thread starts
void MyThread::run()
{
//    std::ofstream log_file("g:\\poop1.txt");
//    if (log_file.is_open())
//    {
//        std::string tmp_filename = get_Groundwater_Output_FileName();
//        qDebug() << "tmp_filename = " << tmp_filename.c_str() << "\n";

//        //fprintf(log_file_ptr, "%s\n" ,tmp_filename);
//        std::string s(tmp_filename);

//        log_file << "This is a line.\n";
//        log_file << s.c_str() << "\n";
//        log_file << tmp_filename << "\n";
//        log_file.close();

//    }

    int error = PIHM_v2_2(this);
    qDebug() << "PIHM error " << error << " \n";

/* KEEP
    for(int i = 0; i <= 10; i++)
    {
        QMutex mutex;
        // prevent other threads from changing the "Stop" value
        mutex.lock();
        if(this->Stop)
            break;
        mutex.unlock();

        // emit the signal for the count label
        emit valueChanged(i);

        // slowdown the count change, msec
        this->msleep(500);
    }
    */
}


void MyThread::kill_from_PIHM(int error_code)
{
    if(print_debug_messages)
        qDebug() << "INFO: Start PIHMThread::kill_from_PIHM";

    try {
        qDebug() << "INFO: Call from PIHM to Kill this Thread\n";
        qDebug() << "INFO: Error Code given " << error_code << "\n";
        //QMutex mutex;
        //this->Stop = true;



    } catch (...) {
        qDebug() << "Error: PIHMThread::kill_from_PIHM is returning w/o checking";
    }
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Helper Function to set Output Folder variable (OUTPUT)
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
bool MyThread::set_Output_Folder(QString folder){

    try {

        output_folder = folder;
        return Check_Output_Folder();

    } catch (...) {
        qDebug() << "Error: PIHMThread::set_Output_Folder is returning w/o checking";
        return false;
    }
    return true;
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Helper Function to set Project variable (INPUT)
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
bool MyThread::set_Project_Name(QString name){

    try {
        project_name =name;
        return Check_Project_Name();
    } catch (...) {
        qDebug() << "Error: PIHMThread::set_Project_Name is returning w/o checking";
        return false;
    }
    return true;
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Helper Function to Check Output Folder exists (OUTPUT)
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
bool MyThread::Check_Output_Folder()
{

    try {

        if(output_folder.isNull() || output_folder.isEmpty())
        {
            return false;
        }

        if (QDir(output_folder).exists() )
        {
            return true;
        }
        else
        {
            return false;
        }

    } catch (...) {
        qDebug() << "Error: PIHMThread::Check_Output_Folder is returning w/o checking";
        return false;
    }

    return true;
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Helper Function to Check Project Name has been set (INPUT)
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
bool MyThread::Check_Project_Name()
{

    try {

        if(project_name.isNull() || project_name.isEmpty())
        {
            return false;
        }
        else
        {
            return true;
        }

    } catch (...) {
        qDebug() << "Error: PIHMThread::Check_Output_Folder is returning w/o checking";
        return false;
    }

    return true;
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Helper Function to get LogFile set by user (OUTPUT)
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
std::string MyThread::get_LogFile_FileName()
{
    QDateTime now = QDateTime::currentDateTime();
    QString now_str = now.toString();
    now_str = now_str.replace(":", "_");

    logFileName = output_folder + "/" + project_name + "_" + now_str + ".log";
    logFileName = logFileName.replace(" ", "_");
    //logFileName = logFileName.replace("/", "\\");


    return logFileName.toUtf8().toStdString();
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Helper Function to get Groundwater fileName (OUTPUT)
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
std::string MyThread::get_Groundwater_Output_FileName()
{
    QString output(output_folder + "/" + project_name + ".gw.dat");
    return output.toUtf8().toStdString();
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Helper Function to get Surface fileName (OUTPUT)
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
std::string MyThread::get_Surf_Output_FileName()
{
    QString output(output_folder + "/" + project_name + ".surf.dat");
    return output.toUtf8().toStdString();
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Helper Function to get et0 fileName (OUTPUT)
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
std::string MyThread::get_et0_Output_FileName()
{
    QString output(output_folder + "/" + project_name + ".et0.dat");
    return output.toUtf8().toStdString();
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Helper Function to get et1 fileName (OUTPUT)
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
std::string MyThread::get_et1_Output_FileName()
{
    QString output(output_folder + "/" + project_name + ".et1.dat");
    return output.toUtf8().toStdString();
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Helper Function to get et2 fileName (OUTPUT)
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
std::string MyThread::get_et2_Output_FileName()
{
    QString output(output_folder + "/" + project_name + ".et2.dat");
    return output.toUtf8().toStdString();
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Helper Function to get is fileName (OUTPUT)
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
std::string MyThread::get_is_Output_FileName()
{
    QString output(output_folder + "/" + project_name + ".is.dat");
    return output.toUtf8().toStdString();
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Helper Function to get snow fileName (OUTPUT)
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
std::string MyThread::get_Snow_Output_FileName()
{
    QString output(output_folder + "/" + project_name + ".snow.dat");
    return output.toUtf8().toStdString();
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Helper Function to get rivFlx fileName (OUTPUT)
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
std::string MyThread::get_rivFlx_Output_FileName(int value)
{
    QString num_str;
    num_str = QString::number(value).rightJustified(2, '0');

    QString output(output_folder + "/" + project_name + ".rivFlx" + num_str + ".dat");
    return output.toUtf8().toStdString();
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Helper Function to get stage fileName (OUTPUT)
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
std::string MyThread::get_Stage_Output_FileName()
{
    QString output(output_folder + "/" + project_name + ".stage.dat");
    return output.toUtf8().toStdString();
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Helper Function to get unsat fileName (OUTPUT)
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
std::string MyThread::get_Unsat_Output_FileName()
{
    QString output(output_folder + "/" + project_name + ".unsat.dat");
    return output.toUtf8().toStdString();
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Helper Function to get rech fileName (OUTPUT)
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
std::string MyThread::get_Rech_Output_FileName()
{
    QString output(output_folder + "/" + project_name + ".rech.dat");
    return output.toUtf8().toStdString();
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Helper Function to get rbed fileName (OUTPUT)
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
std::string MyThread::get_rbed_Output_FileName()
{
    QString output(output_folder + "/" + project_name + ".rbed.dat");
    return output.toUtf8().toStdString();
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Helper Function to get infil fileName (OUTPUT)
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
std::string MyThread::get_infil_Output_FileName()
{
    QString output(output_folder + "/" + project_name + ".infil.dat");
    return output.toUtf8().toStdString();
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Helper Function to get mesh fileName (INPUT)
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
std::string MyThread::get_mesh_Input_FileName()
{
    QString output(output_folder + "/" + project_name + ".mesh");
    return output.toUtf8().toStdString();
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Helper Function to get att fileName (INPUT)
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
std::string MyThread::get_att_Input_FileName()
{
    QString output(output_folder + "/" + project_name + ".att");
    return output.toUtf8().toStdString();
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Helper Function to get forc fileName (INPUT)
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
std::string MyThread:: get_forc_Input_FileName()
{
    QString output(output_folder + "/" + project_name + ".forc");
    return output.toUtf8().toStdString();
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Helper Function to get ibc fileName (INPUT)
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
std::string MyThread::get_ibc_Input_FileName()
{
    QString output(output_folder + "/" + project_name + ".ibc");
    return output.toUtf8().toStdString();
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Helper Function to get soil fileName (INPUT)
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
std::string MyThread::get_soil_Input_FileName()
{
    QString output(output_folder + "/" + project_name + ".soil");
    return output.toUtf8().toStdString();
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Helper Function to get geol fileName (INPUT)
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
std::string MyThread::get_geol_Input_FileName()
{
    QString output(output_folder + "/" + project_name + ".geol");
    return output.toUtf8().toStdString();
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Helper Function to get lc fileName (INPUT)
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
std::string MyThread::get_lc_Input_FileName()
{
    QString output(output_folder + "/" + project_name + ".lc");
    return output.toUtf8().toStdString();
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Helper Function to get para fileName (INPUT)
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
std::string MyThread::get_para_Input_FileName()
{
    QString output(output_folder + "/" + project_name + ".para");
    return output.toUtf8().toStdString();
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Helper Function to get riv fileName (INPUT)
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
std::string MyThread::get_riv_Input_FileName()
{
    QString output(output_folder + "/" + project_name + ".riv");
    return output.toUtf8().toStdString();
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Helper Function to get calib fileName (INPUT)
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
std::string MyThread::get_calib_Input_FileName()
{
    QString output(output_folder + "/" + project_name + ".calib");
    return output.toUtf8().toStdString();
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Helper Function to get init fileName (INPUT)
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
std::string MyThread::get_init_Input_FileName()
{
    QString output(output_folder + "/" + project_name + ".init");
    return output.toUtf8().toStdString();
}




